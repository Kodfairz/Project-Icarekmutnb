import { Elysia } from 'elysia';
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import FormData from "form-data";
import multer from "multer";
import fs from "fs";
import axios from 'axios';

const upload = multer({ dest: "uploads/" }); // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads

const prisma = new PrismaClient();


export const userRoutes = new Elysia({ prefix: "/users" })
    .get('/', async () => {
        return await prisma.users.findMany()
    })
    .post('/', async ({ body }) => {
        const user = await prisma.users.findFirst({
            where: {
                username: body.username
            }
        })

        if (user) {
            throw new Error("‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
        }

        const password = bcrypt.hashSync(body.password, 10);
        return await prisma.users.create({
            data: {
                username: body.username,
                password: password,
                role: body.role
            }
        })
    })
    .post("/login", async ({ body }) => {
        const user = await prisma.users.findFirst({
            where: {
                username: body.username
            }
        })

        if (!user) {
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        }

        const isPasswordMatch = bcrypt.compareSync(body.password, user.password);

        if (!isPasswordMatch) {
            throw new Error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        }

        const token = jwt.sign({
            data: {
                "username": user.username,
                "role": user.role,
                "id": user.id,
                "isActive": user.isActive
            }
        }, 'secret', { expiresIn: '24h' });

        return {
            "token": token,
            "resultData": {
                "username": user.username,
                "role": user.role,
                "id": user.id,
                "isActive": user.isActive
            }
        };
    })
    .put("/:id", async ({ body, params }) => {
        const user = await prisma.users.findFirst({
            where: {
                id: Number(params.id)
            }
        })

        if (!user) {
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        }

        const updateUser = await prisma.users.update({
            where: {
                id: Number(params.id)
            },
            data: {
                username: body.username
            }
        })

        if (!updateUser) {
            throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        }

        return {
            "message": "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        }
    })

    .put("/change-password/:id", async ({ body, params }) => {
        const user = await prisma.users.findFirst({
            where: {
                id: Number(params.id)
            }
        })

        const isPasswordMatch = bcrypt.compareSync(body.oldPassword, user.password);

        if (!isPasswordMatch) {
            throw new Error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        }

        const newPassword = bcrypt.hashSync(body.newPassword, 10);

        const updateUser = await prisma.users.update({
            where: {
                id: Number(params.id)
            },
            data: {
                password: newPassword
            }
        })

        if (!updateUser) {
            throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        }

        return {
            "message": "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        }
    })
    .patch("/status/:id", async ({ params }) => {
        const user = await prisma.users.findFirst({
            where: {
                id: Number(params.id)
            }
        })

        if (!user) {
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        }

        const updateUser = await prisma.users.update({
            where: {
                id: Number(params.id)
            },
            data: {
                isActive: !user.isActive
            }
        })

        if (!updateUser) {
            throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ")
        }

        return {
            "message": "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        }
    })
    .delete("/:id", async ({ params }) => {
        const user = await prisma.users.findFirst({
            where: {
                id: Number(params.id)
            }
        })

        if (!user) {
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        }

        const deleteUser = await prisma.users.delete({
            where: {
                id: Number(params.id)
            }
        })

        if (!deleteUser) {
            throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        }

        return {
            "message": "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        }
    })
    .get("/:id", async ({ params }) => {
        const user = await prisma.users.findFirst({
            where: {
                id: Number(params.id)
            }
        })

        if (!user) {
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        }

        return {
            "resultData": user
        };
    })
    .post("/upload-image", upload.single("image"), async ({ file }) => {
        if (!file) {
            return { success: false, message: "No file uploaded" };
        }

        try {
            // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô Stream ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ Imgur
            const imageStream = fs.createReadStream(file.path);
            const formData = new FormData();
            formData.append("image", imageStream);

            // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏õ Imgur
            const response = await axios.post("https://api.imgur.com/3/image", formData, {
                headers: {
                    Authorization: "Client-ID 0bc0666a250e55e", // üîë ‡πÉ‡∏ä‡πâ Client-ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                    ...formData.getHeaders(),
                },
            });

            // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà)
            fs.unlinkSync(file.path);

            return { success: true, url: response.data.data.link };
        } catch (error) {
            console.error("Upload error:", error.message);
            return { success: false, message: "Upload failed" };
        }
    });


